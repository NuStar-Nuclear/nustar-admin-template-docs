import{_ as d,M as a,p as i,q as r,R as e,t,N as s,a1 as o}from"./framework-204010b2.js";const n={},l=o('<h1 id="vuetify-使用经验与建议" tabindex="-1"><a class="header-anchor" href="#vuetify-使用经验与建议" aria-hidden="true">#</a> Vuetify 使用经验与建议</h1><p>Vuetify 的一大优点在于几乎不需要用户写 css。通过正确地使用相应的组件组合以及给组件添加适当的 attribute 就可以实现大多数场景下的界面布局。比如在一个包含 icon 与文字的按钮中，给 icon 添加<code>left</code> attribute 就可以让 icon 拥有和字体适应的大小并在 icon 和字体之间插入适当的间距，而不需要用户自行添加<code>mr-x</code>或<code>pl-x</code>等间距 class。 Vuetify 中的一些组件应该协同起来使用，例如<code>v-container</code>、<code>v-row</code>和<code>v-col</code>；<code>v-card</code>、<code>v-card-title</code>。使内容拥有整齐的内外边距，又易于用 Vuetify sass variable 进行自定义。</p>',2),v={id:"vuetify-theme-provider",tabindex:"-1"},u=e("a",{class:"header-anchor",href:"#vuetify-theme-provider","aria-hidden":"true"},"#",-1),h={href:"https://vuetifyjs.com/en/features/theme/#theme-provider",target:"_blank",rel:"noopener noreferrer"},f=o(`<p><code>&lt;v-theme-provider /&gt;</code>组件提供了下面这个元素的语法糖,</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;v-sheet style=&quot;display:contents&quot;&gt;
    ...
&lt;/v-sheet&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相当于给他的子元素添加了一个不会被渲染出来的父容器，但是这个父容器包含主题 class: <code>theme--light</code>/<code>theme--dark</code>，可用于子元素的主题样式定义。这样一来，不要写 JavaScript 就可以实现非 Vuetify 组件明暗模式的样式定义与切换。</p><p>因为本项目允许自定义主题色， 和颜色有关的样式应尽量使用 Vuetify 提供的响应式颜色变体和 css 变量。</p>`,4);function p(_,m){const c=a("ExternalLinkIcon");return i(),r("div",null,[l,e("h2",v,[u,t(),e("a",h,[t("Vuetify Theme Provider"),s(c)])]),f])}const x=d(n,[["render",p],["__file","vuetify.html.vue"]]);export{x as default};
