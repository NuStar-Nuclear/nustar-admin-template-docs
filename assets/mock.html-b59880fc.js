import{_ as p,M as t,p as c,q as r,R as n,t as s,N as a,a1 as i}from"./framework-204010b2.js";const l={},u=n("h1",{id:"mock-data",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mock-data","aria-hidden":"true"},"#"),s(" Mock Data")],-1),d=n("p",null,"前端单独开发时，后端不一定开发好了接口，这时就需要假数据。",-1),k={href:"https://expressjs.com/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://swagger.io",target:"_blank",rel:"noopener noreferrer"},v={id:"tsoa",tabindex:"-1"},g=n("a",{class:"header-anchor",href:"#tsoa","aria-hidden":"true"},"#",-1),h={href:"https://swagger.io/tools/swagger-ui/",target:"_blank",rel:"noopener noreferrer"},b=i(`<p>tsoa 生成的 api 自带 runtime validator。</p><h2 id="swagger-ui-express" tabindex="-1"><a class="header-anchor" href="#swagger-ui-express" aria-hidden="true">#</a> swagger-ui-express</h2><p>在启动 mock server 的同时根据 tsoa 输出的自动生成文档网站。</p><h2 id="写法" tabindex="-1"><a class="header-anchor" href="#写法" aria-hidden="true">#</a> 写法</h2><p>假设你有一个 api <code>get /users/{username}</code>, 需要 mock，那么</p><p>1.在<code>/mock/</code>文件夹下的<code>users.ts</code>中， 编写一个<code>getUserByName</code>的方法并<code>export</code>:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// users.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Response<span class="token punctuation">,</span> Request <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;express&#39;</span>
<span class="token keyword">const</span> userList<span class="token operator">:</span> UserType<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span>  <span class="token comment">// 编的一些假用户</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getUserByName</span> <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token operator">:</span> Request<span class="token punctuation">,</span> res<span class="token operator">:</span> Response<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> username <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>params <span class="token comment">// API上的参数在，req.params中，而</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> user <span class="token keyword">of</span> userList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">.</span>username <span class="token operator">===</span> username<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    code<span class="token operator">:</span> <span class="token number">50004</span><span class="token punctuation">,</span>
    message<span class="token operator">:</span> <span class="token string">&#39;Invalid User&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>API 上的参数在 req.params 中， 而 url 末尾紧跟<code>？</code>的参数例如<code>?email=123@test.com</code>在<code>req.query</code>中, <code>axios</code>请求中的<code>data</code>就是<code>req.body</code></p></div><p>2.在<code>/mock/</code>文件夹下的<code>api.ts</code>中导入并导出<code>users.ts</code>:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// api.ts</span>
<span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&quot;./users&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>3.在<code>/mock/</code>文件夹下的<code>swagger.yml</code>中的<code>paths</code>下配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># swagger.yml</span>
<span class="token key atrule">paths</span><span class="token punctuation">:</span>
  /users/<span class="token punctuation">{</span>username<span class="token punctuation">}</span><span class="token punctuation">:</span>
    <span class="token key atrule">get</span><span class="token punctuation">:</span>
      <span class="token key atrule">operationId</span><span class="token punctuation">:</span> <span class="token string">&quot;getUserByName&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4.启动 mock-server:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> mock
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>修改 api.ts 中相关联的 ts 文件会触发热更新，不需要重启 mock-server</p></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>修改 swagger.yml 并不会热更新，这时需要重启 mock-server 或者随便在关联的 ts 中作一个小修改触发热更新</p></div>`,16);function y(_,f){const e=t("ExternalLinkIcon"),o=t("Badge");return c(),r("div",null,[u,d,n("p",null,[s("此项目使用 "),n("a",k,[s("express"),a(e)]),s(" 启动一个 nodejs 后端服务作为 mock server 来模拟业务数据。根据业务需要也可以直接将此后端作为生产环境下的后端使用。")]),n("p",null,[s("本项目 mock server 的主角是"),n("a",m,[s("swagger"),a(e)]),s("，swagger 是一个 REST APIs 文档生成工具，它从代码注释中自动生成文档，可以跨平台，开源，支持大部分语言。swagger 后来衍生出了 OpenAPI 规范 (OAS) 为 RESTful API 定义了一个与语言无关的标准接口。许多开源库可以直接通过 OpenAPI 来生成 API 文档，甚至是直接生成各种编程语言的后端服务。")]),n("h2",v,[g,s(" tsoa "),a(o,{type:"tip",text:"new",vertical:"middle"})]),n("p",null,[s("从包含装饰器的 typescript 源代码中生成 OpenAPI，利用 jsdoc 生成接口描述等纯文本信息。自动将 express route controller 连接到 restful api 上。相当于，只需要写基于 typescript 的后端接口，就自动拥有了后端路由和 OpenAPI，而 OpenAPI 则可以通过"),n("a",h,[s("swagger ui"),a(e)]),s("自动生成可交互文档。")]),b])}const x=p(l,[["render",y],["__file","mock.html.vue"]]);export{x as default};
